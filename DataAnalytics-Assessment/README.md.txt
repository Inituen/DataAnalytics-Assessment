SQL Assessment for Data Analytics

This repository includes structured SQL queries developed to analyze savings and investment activity. 
Each query aims to extract actionable insights with a focus on accuracy, clarity, and performance.

Assessment Questions

Q1: Customers with Funded Savings and Investment Plans

Goal: Identify users who have both at least one funded savings plan and one funded investment plan, ranked by their total deposits.

Method:
Performed JOIN between plans_plan and savings_savingsaccount using plan_id.
Filtered for savings (is_regular_savings = 1) and investment plans (is_a_fund = 1).
Ensured only funded plans were included (confirmed_amount > 0).
Used aggregation to calculate total deposits per user.
Leveraged CTEs to enhance readability and minimize redundancy.
 

Q2: Detecting Inactive Plans

Goal: Identify accounts without any inflow activity in the past 12 months.

Method:
Used MAX(transaction_date) to find each plan's last inflow date.
Applied DATEDIFF(CURRENT_DATE, last_transaction_date) > 365 to determine inactivity.
Classified accounts by type via join with plans_plan.
Suggested indexing to enhance query performance.
 
Q3: Analyzing User Transaction Frequency

Goal: Classify customers by how often they perform transactions.

Method:
Calculated monthly activity range per user.
Grouped users as High, Medium, or Low frequency based on transaction behavior.
Applied CTEs to separate logic layers and simplify the structure.
Aggregated early in the query for improved speed.

Q4: Estimating Customer Lifetime Value (CLV)

Goal: Estimate long-term value generated by individual customers.

Method:
Calculated user account age in months.
Summed up confirmed inflows to assess financial activity.
Derived CLV using:
CLV=(total inflowtenure in months)×12×average profit per transactionCLV = \left( \frac{\text{total inflow}}{\text{tenure in months}} \right) \times 12 \times \text{average profit per transaction}
Sorted customers by their projected CLV for prioritization.
Challenges & Performance Enhancements

Challenges Encountered:
Data volume handling: Addressed through targeted indexing and join optimization.
Missing/incomplete data: Applied COALESCE and conditional filters to maintain reliability.
Encoding/collation mismatches: Fixed through consistent collation application in joins.

Performance Optimizations:
Used CTEs to organize logic and avoid repetition.
Indexed critical fields like owner_id, plan_id, and transaction_date.
Applied filters early to reduce dataset size before joining.
 
Deliverables Checklist:
One clearly written SQL query per task.
Inline comments for complex logic sections.
Thoughtful grouping and organization.
README with thorough explanations of approach and reasoning.
 